import { useState } from 'react';
import { useNavigate } from 'react-router-dom';

const Contact = () => {
    const [name, setName] = useState('');
    const [password, setPassword] = useState('');
    const navigate = useNavigate(); //(1)

    const handleSubmit = (e) => {
        e.preventDefault(); // ржкрзЗржЬ рж░рж┐рж▓рзЛржб ржмржирзНржз ржХрж░рждрзЗ

        const info = {
            "name": "rakib",
            "age": 29
        }

        // ржирж╛ржо ржУ ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб ржЪрзЗржХ ржХрж░рж╛
        if (name === 'rakib' && password === 'rakib') {
            navigate('/about',{ state: info }); // about ржкрзЗржЬрзЗ ржирзЗржнрж┐ржЧрзЗржЯ ржХрж░рж╛ рж╕рж╛ржерзЗ ржбрж╛ржЯрж╛ ржкрж╛ржарж╛ржирзЛ ржПржЫрж╛рзЬрж╛ржУ ржПржЦрж╛ржирзЗ state ржПрж░ржорж╛ржжрзНржзржорзЗ about ржП ржЖржорж░рж╛ ржбрж╛ржЯрж╛ ржкрж╛ржЯрж╛ржЗржЫрж┐ (рзз)
        } else {
            alert('Invalid name or password'); // ржнрзБрж▓ рж╣рж▓рзЗ ржПрж▓рж╛рж░рзНржЯ ржжрзЗржЦрж╛ржирзЛ
        }
    };

    return (
        <div>
            <p>contact ......</p>

            <form onSubmit={handleSubmit} className="flex flex-col w-1/4 gap-2">
                <input
                    className="bg-gray-500"
                    type="text"
                    placeholder="name"
                    value={name}
                    onChange={(e) => setName(e.target.value)} // ржЗржиржкрзБржЯрзЗрж░ ржорж╛ржи рж╕рзЗржЯ ржХрж░рж╛
                />
                <input
                    className="bg-gray-500"
                    type="password"
                    placeholder="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)} // ржЗржиржкрзБржЯрзЗрж░ ржорж╛ржи рж╕рзЗржЯ ржХрж░рж╛
                />
                <button className="py-2 px-4 bg-red-400" type="submit">Submit</button>
            </form>
        </div>
    );
};

export default Contact;

// ==> 1 ржЖржкржирж┐ ржорзВрж▓ржд рждрж┐ржиржЯрж┐ ржЬрж┐ржирж┐рж╕ navigate-ржПрж░ ржорж╛ржзрзНржпржорзЗ ржкрж╛рж╕ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи:

// navigate ржПрж░ ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ рж╕ржорзВрж╣
// javascript
// Copy code
// navigate(path, { state, replace });
// path:

// ржирзЗржнрж┐ржЧрзЗрж╢ржирзЗрж░ рж▓ржХрзНрж╖рзНржп ржкрж╛рже (URL)ред
// ржЙржжрж╛рж╣рж░ржг: /about, /profile, /dashboard.
// state:

// ржбрзЗржЯрж╛ ржмрж╛ ржЕржмржЬрзЗржХрзНржЯ ржпрж╛ ржЧржирзНрждржмрзНржп ржкрзЗржЬрзЗ ржкрж╛ржарж╛рждрзЗ ржЪрж╛ржиред
// ржЙржжрж╛рж╣рж░ржг: { id: 123, name: 'Rakib' }
// replace:

// ржПржХржЯрж┐ ржмрзБрж▓рж┐ржпрж╝рж╛ржи (рж╕рждрзНржп/ржорж┐ржерзНржпрж╛) ржорж╛ржи ржпрж╛ ржирж┐рж░рзНржжрзЗрж╢ ржХрж░рзЗ ржпрзЗ ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗрж░ рж╣рж┐рж╕рзНржЯрзНрж░рж┐рждрзЗ ржирждрзБржи ржПржирзНржЯрзНрж░рж┐ ржпрзЛржЧ ржХрж░рж╛ рж╣ржмрзЗ ржХрж┐ржирж╛ред
// true рж╣рж▓рзЗ, ржмрж░рзНрждржорж╛ржи ржПржирзНржЯрзНрж░рж┐ ржкрзНрж░рждрж┐рж╕рзНржерж╛ржкрж┐ржд рж╣ржмрзЗред
// ржбрж┐ржлрж▓рзНржЯ ржорж╛ржи: falseред
// ржЙржжрж╛рж╣рж░ржг:
// javascript
// Copy code
// navigate('/about', { replace: true });
// ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЙржжрж╛рж╣рж░ржг
// рзз. state рж╕рж╣ ржирзЗржнрж┐ржЧрзЗржЯ ржХрж░рж╛:
// javascript
// Copy code
// navigate('/about', { state: { username: 'Rakib', role: 'Admin' } });
// рзи. replace ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛:
// javascript
// Copy code
// navigate('/dashboard', { replace: true });
// replace: true ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗрж░ Back ржмрзЛрждрж╛ржо ржЪрж╛ржкрж▓рзЗ ржЖржЧрзЗрж░ ржкрзЗржЬрзЗ ржпрж╛ржУржпрж╝рж╛ ржпрж╛ржмрзЗ ржирж╛ред

// рзй. state ржПржмржВ replace ржПржХрж╕рж╛ржерзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛:
// javascript
// Copy code
// navigate('/profile', { state: { id: 123 }, replace: true }); state ржПрж░ ржЙржжрзНржжрзЗрж╢рзНржп
// ржкрзЗржЬ рж░рж┐ржлрзНрж░рзЗрж╢ ржирж╛ ржХрж░рзЗржЗ ржбрзЗржЯрж╛ ржкрж╛ржарж╛ржирзЛрж░ ржЬржирзНржпред
// ржЧрзНрж▓рзЛржмрж╛рж▓ рж╕рзНржЯрзЗржЯ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ (ржпрзЗржоржи Redux) ржмрзНржпржмрж╣рж╛рж░ ржирж╛ ржХрж░рзЗржУ ржбрзЗржЯрж╛ ржкрж╛рж╕ ржХрж░рж╛рж░ ржЬржирзНржпред
// ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж░рж╛ржЙржЯрзЗ ржирзЗржнрж┐ржЧрзЗржЯ ржХрж░рж╛рж░ рж╕ржоржпрж╝ ржЕрждрж┐рж░рж┐ржХрзНржд рждржерзНржп ржпрзЛржЧ ржХрж░рж╛рж░ ржЬржирзНржпред path рж╕ржмрж╕ржоржпрж╝ ржжрзЗржУржпрж╝рж╛ ржкрзНрж░ржпрж╝рзЛржЬржи, ржПржЯрж┐ ржирзЗржнрж┐ржЧрзЗрж╢ржирзЗрж░ ржЧржирзНрждржмрзНржпред
// state ржЕржкрж╢ржирж╛рж▓ ржПржмржВ рж╢рзБржзрзБржорж╛рждрзНрж░ ржбрзЗржЯрж╛ ржкрж╛рж╕ ржХрж░рж╛рж░ ржЬржирзНржпред
// replace ржЕржкрж╢ржирж╛рж▓ ржПржмржВ ржПржЯрж┐ ржбрж┐ржлрж▓рзНржЯржнрж╛ржмрзЗ false ржерж╛ржХрзЗред
// ржЖржкржирж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржи ржЕржирзБржпрж╛ржпрж╝рзА ржЖржкржирж┐ ржПржЗ рждрж┐ржиржЯрж┐ ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред ЁЯШК